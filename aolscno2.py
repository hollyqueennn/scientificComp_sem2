# -*- coding: utf-8 -*-
"""aolscno2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13bK0sAyiqvSXiXP0ZrJeO44RAMj9EwpG
"""

import sympy as sp

x = sp.Symbol('x')
a = sp.sin(x)
b = sp.cos(x)
c = sp.sin(x) * sp.cos(x)

sin = a.series(x, 0, 5) . removeO()
cos = b.series(x, 0, 5) . removeO()
sincos = c.series(x, 0, 5) . removeO()

print("Taylor Expansion for Sin(x) = ", sin)
print("Taylor Expansion for Cos(x) = ", cos)
print("Taylor Expansion for Sin(xCos(x) = ", sincos)

import numpy as np
import math

#sin
x = np.pi / 2
y_sin = 0
for n in range(2):
  y_sin = y_sin + ((-1) ** n * (x) ** (2 * n + 1)) / np.math.factorial(2 * n + 1)

#cos
y_cos = 1
for n in range(2):
  y_cos = y_cos - ((-1) ** n * (x) ** (2 * n + 2)) / np.math.factorial(2 * n + 2)

result_sincosx = y_sin * y_cos

print("Method 1")
print("Sin(x) = {:.3f}".format(y_sin))
print("Cos(x) = {:.3f}".format(y_cos))
print("Multiplying the result together = {:.3f}".format(result_sincosx))

#sincos
y_sincos = 0
for n in range(2):
  y_sincos = y_sincos + (((1 + n) * ((-1) ** n)) * (x) ** (2 * n + 1)) / (2 * n + 1)

print("Method 2")
print("Sin(x)Cos(x) = {:.3f}".format(y_sincos))