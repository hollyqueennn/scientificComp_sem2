# -*- coding: utf-8 -*-
"""aolscno3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X3uPcCLT_GQuzc-w3xUHIjOTGnTJbw0C
"""

import numpy as np
import math

f = lambda x :  (x**3) - (0.3 * (x ** 2)) - (8.56 * x) + 8.448
a = 0
b = 2 * math.pi
n = 20
h = (b - a) / (n - 1)
x = np.linspace(a, b, n)
y = f(x)

riemann_left = h * sum(y[:n - 1])
riemann_right = h * sum(y[1::])

x_mid = (x[:-1] + x[1:]) / 2
y_mid = f(x_mid)
riemann_mid = h * sum(y_mid)


trapezoid = (h / 2)*(y[0] + 2 * sum(y[1:n - 1]) + y[n - 1])
simpson = (h / 3) * (y[0] + 2 * sum(y[:n - 2:2]) + 4 * sum(y[1:n - 1:2]) + y[n -1])

print("Riemann Left Intergral : ", riemann_left)
print("Riemann Right Intergral : ", riemann_right)
print("Riemann Mid Intergral : ", riemann_mid)
print("Trapezoid Rule : ", trapezoid)
print("Simpson's Rule : ", simpson)

"""**C**"""

import numpy as np

x = ([-1.1, -0.3, 0.8, 1.9])
y = ([15.180, 10.962, 1.920, -2.040])
xi = 0

n = len(x)
coef = np.zeros((n, n))
coef[:, 0] = y

for j in range (1, n):
  for i in range(0, n - j):
    coef[i, j] = (coef[i + 1, j - 1] - coef[0, j -1]) / (x[i + j] - x[j - 1])

p = coef[0,0]
for i in range(1, n):
  a = coef[0, i]
  for j in range(0, i):
    a = a * (xi - x[j])
  p = p + a

print("f(xi) : ", p)
print()
print("Coefficient : ")
print(coef)